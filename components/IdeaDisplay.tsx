'use client'

import { BookIdea } from '@/types'
import ShareButtons from './ShareButtons'
import Button from './ui/Button'
import { IdeaStorage } from '@/lib/storage'
import { useState, useEffect } from 'react'

interface IdeaDisplayProps {
  idea: BookIdea
  onGenerateNew?: () => void
}

export default function IdeaDisplay({ idea, onGenerateNew }: IdeaDisplayProps) {
  const [isSaved, setIsSaved] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [selectedTitle, setSelectedTitle] = useState(0)
  const [showCopySuccess, setShowCopySuccess] = useState(false)
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    setIsSaved(IdeaStorage.isIdeaSaved(idea.id))
    // Add to history when idea is displayed
    IdeaStorage.addToHistory(idea)
    setIsVisible(true)
  }, [idea.id])

  const handleSaveToggle = async () => {
    setIsSaving(true)
    try {
      if (isSaved) {
        IdeaStorage.removeFavorite(idea.id)
        setIsSaved(false)
      } else {
        IdeaStorage.saveFavorite(idea)
        setIsSaved(true)
      }
    } catch (error) {
      console.error('Failed to toggle save status:', error)
    } finally {
      setIsSaving(false)
    }
  }

  const handleCopyIdea = async () => {
    const ideaText = `
üìö ${idea.title[selectedTitle]}

üé≠ Genre: ${idea.genre}
üéØ Target Audience: ${idea.targetAudience}

üí° Concept:
${idea.concept}

üë§ Main Character:
${idea.mainCharacter}

üåç Setting:
${idea.setting}

‚öîÔ∏è Central Conflict:
${idea.conflict}

üìñ Opening Line:
"${idea.openingLine}"

üè∑Ô∏è Themes: ${idea.themes.join(', ')}

Generated by BookSpark - Ignite Your Next Story
    `.trim()

    try {
      await navigator.clipboard.writeText(ideaText)
      setShowCopySuccess(true)
      setTimeout(() => setShowCopySuccess(false), 2000)
    } catch (error) {
      console.error('Failed to copy idea:', error)
    }
  }

  const sections = [
    {
      icon: 'üí°',
      title: 'Concept',
      content: idea.concept,
      className: 'sm:col-span-2'
    },
    {
      icon: 'üë§',
      title: 'Main Character',
      content: idea.mainCharacter,
      className: ''
    },
    {
      icon: 'üåç',
      title: 'Setting',
      content: idea.setting,
      className: ''
    },
    {
      icon: '‚öîÔ∏è',
      title: 'Central Conflict',
      content: idea.conflict,
      className: 'sm:col-span-2'
    },
    {
      icon: 'üìñ',
      title: 'Opening Line',
      content: `"${idea.openingLine}"`,
      className: 'sm:col-span-2',
      isItalic: true
    }
  ]

  return (
    <div className={`transform transition-all duration-700 ${
      isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
    }`}>
      <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-primary/10 to-accent/10 border-b border-gray-100 p-6 sm:p-8">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div>
              <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">
                Your Book Idea ‚ú®
              </h2>
              <p className="text-gray-600">
                Generated on {idea.generatedAt.toLocaleDateString()} ‚Ä¢ {idea.genre}
              </p>
            </div>
            
            {/* Quick Actions */}
            <div className="flex items-center space-x-2">
              <Button
                onClick={handleSaveToggle}
                disabled={isSaving}
                variant={isSaved ? "primary" : "outline"}
                size="sm"
                className="flex items-center space-x-2 min-h-11 min-w-11 px-4"
              >
                <svg className="w-4 h-4" fill={isSaved ? "currentColor" : "none"} stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
                <span className="hidden sm:inline">
                  {isSaving ? 'Saving...' : isSaved ? 'Saved' : 'Save'}
                </span>
              </Button>
              
              <ShareButtons idea={idea} />
            </div>
          </div>
        </div>

        <div className="p-6 sm:p-8 space-y-8">
          {/* Title Selection */}
          <div>
            <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
              <span className="mr-2">üìö</span>
              Title Options
            </h3>
            <div className="grid grid-cols-1 gap-3">
              {idea.title.map((title, index) => (
                <button
                  key={index}
                  onClick={() => setSelectedTitle(index)}
                  className={`p-4 rounded-xl border-2 transition-all duration-300 text-left hover:scale-105 min-h-12 ${
                    selectedTitle === index
                      ? 'border-primary bg-primary/5 shadow-lg'
                      : 'border-gray-200 hover:border-primary/50 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <span className={`font-semibold text-lg ${
                      selectedTitle === index ? 'text-primary' : 'text-gray-900'
                    }`}>
                      "{title}"
                    </span>
                    <div className={`w-4 h-4 rounded-full border-2 transition-all duration-200 ${
                      selectedTitle === index
                        ? 'border-primary bg-primary'
                        : 'border-gray-300'
                    }`}>
                      {selectedTitle === index && (
                        <div className="w-full h-full rounded-full bg-white scale-50" />
                      )}
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Content Sections */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {sections.map((section, index) => (
              <div key={section.title} className={`${section.className}`}>
                <h3 className="text-lg font-bold text-gray-900 mb-3 flex items-center">
                  <span className="mr-2 text-xl">{section.icon}</span>
                  {section.title}
                </h3>
                <div className={`bg-gray-50 rounded-xl p-4 border border-gray-200 ${
                  section.isItalic ? 'italic' : ''
                }`}>
                  <p className="text-gray-700 leading-relaxed">
                    {section.content}
                  </p>
                </div>
              </div>
            ))}
          </div>

          {/* Audience & Themes */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div>
              <h3 className="text-lg font-bold text-gray-900 mb-3 flex items-center">
                <span className="mr-2">üéØ</span>
                Target Audience
              </h3>
              <div className="bg-primary/10 border border-primary/20 rounded-xl p-4">
                <span className="text-primary font-semibold capitalize">
                  {idea.targetAudience.replace('-', ' ')}
                </span>
              </div>
            </div>

            <div>
              <h3 className="text-lg font-bold text-gray-900 mb-3 flex items-center">
                <span className="mr-2">üè∑Ô∏è</span>
                Key Themes
              </h3>
              <div className="flex flex-wrap gap-2">
                {idea.themes.map((theme, index) => (
                  <span 
                    key={index}
                    className="px-3 py-2 bg-accent/10 border border-accent/20 text-accent font-medium rounded-lg text-sm capitalize"
                  >
                    {theme}
                  </span>
                ))}
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="border-t border-gray-200 pt-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <Button
                onClick={handleCopyIdea}
                variant="outline"
                className="flex-1 flex items-center justify-center space-x-2 py-4 text-lg font-semibold border-2 hover:border-primary text-gray-700 hover:text-primary transition-all duration-300 min-h-14"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                <span>{showCopySuccess ? 'Copied!' : 'Copy Idea'}</span>
              </Button>

              {onGenerateNew && (
                <Button
                  onClick={onGenerateNew}
                  className="flex-1 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white py-4 px-6 text-lg font-bold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 min-h-14"
                >
                  <div className="flex items-center justify-center space-x-2">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    <span>Generate Another</span>
                  </div>
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Success Feedback */}
      {showCopySuccess && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-6 py-3 rounded-full shadow-lg z-50 animate-bounce">
          ‚úÖ Idea copied to clipboard!
        </div>
      )}
    </div>
  )
}